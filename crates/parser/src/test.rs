use crate::{parse, Allocator, AST};
use indoc::indoc;

impl AST<'_, '_> {
  fn is_ok(&self) -> bool {
    self.errors.is_empty()
  }
  fn is_err(&self) -> bool {
    !self.errors.is_empty()
  }
}

fn parse_to_string(source: &str) -> String {
  let allocator = Allocator::new();
  let ast = parse(source, &allocator);
  ast.to_string()
}

#[test]
fn unterminated_string() {
  let allocator = Allocator::new();
  assert!(parse("'unterminated string", &allocator).is_err());
  assert!(parse("\"un", &allocator).is_err());
  assert!(parse("`", &allocator).is_err());

  assert!(parse("``", &allocator).is_ok());
  assert!(parse("`hello world`", &allocator).is_ok());
}

#[test]
fn unknown_character() {
  let allocator = Allocator::new();
  assert!(parse("Â¬", &allocator).is_err());
  assert!(parse("3 $ 4", &allocator).is_err());
  assert!(parse("3 Â¬ 4", &allocator).is_err());
  assert!(parse("ðŸ¤—", &allocator).is_err());
  assert!(parse(".-2", &allocator).is_err());
  assert!(parse("&", &allocator).is_err());

  // Having unknown characters in strings are fine
  assert!(parse("'Â¬'", &allocator).is_ok());
  assert!(parse("'ðŸ¤—'", &allocator).is_ok());
}

#[test]
fn binary() {
  let ast = parse_to_string("4 + 23");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Number (4)
    â”‚  â•°â”€ Number (23)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("'hello ' ++ 'world'");
  let expected = indoc! {"
    â”œâ”€ Binary (++)
    â”‚  â”œâ”€ String 'hello '
    â”‚  â•°â”€ String 'world'
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("4 * 56 >> 32");
  let expected = indoc! {"
    â”œâ”€ Binary (>>)
    â”‚  â”œâ”€ Binary (*)
    â”‚  â”‚  â”œâ”€ Number (4)
    â”‚  â”‚  â•°â”€ Number (56)
    â”‚  â•°â”€ Number (32)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("false or 6.12");
  let expected = indoc! {"
    â”œâ”€ Binary (or)
    â”‚  â”œâ”€ Boolean (false)
    â”‚  â•°â”€ Number (6.12)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("5 % 2 == 1 && 3 / 1");
  let expected = indoc! {"
    â”œâ”€ Binary (and)
    â”‚  â”œâ”€ Binary (==)
    â”‚  â”‚  â”œâ”€ Binary (%)
    â”‚  â”‚  â”‚  â”œâ”€ Number (5)
    â”‚  â”‚  â”‚  â•°â”€ Number (2)
    â”‚  â”‚  â•°â”€ Number (1)
    â”‚  â•°â”€ Binary (/)
    â”‚     â”œâ”€ Number (3)
    â”‚     â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn binary_precedence() {
  let ast = parse_to_string("1 + 2 * 3");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Number (1)
    â”‚  â•°â”€ Binary (*)
    â”‚     â”œâ”€ Number (2)
    â”‚     â•°â”€ Number (3)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("5 + 3 * 2");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ Binary (*)
    â”‚     â”œâ”€ Number (3)
    â”‚     â•°â”€ Number (2)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn binary_missing_left_expression() {
  let allocator = Allocator::new();
  assert!(parse("+ 5", &allocator).is_err());
  assert!(parse("*", &allocator).is_err());
  assert!(parse(" || 7", &allocator).is_err());
}

#[test]
fn binary_missing_right_expression() {
  let allocator = Allocator::new();
  assert!(parse("4 +", &allocator).is_err());
  assert!(parse("'hello' *", &allocator).is_err());
  assert!(parse("false ||", &allocator).is_err());
}

#[test]
fn blocks() {
  let ast = parse_to_string("{false}");
  let expected = indoc! {"
    â”œâ”€ Block
    â”‚  â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"{
    let x = 4
    x + 2
  }"});
  let expected = indoc! {"
    â”œâ”€ Block
    â”‚  â”œâ”€ Let 'x' =
    â”‚  â”‚  â•°â”€ Number (4)
    â”‚  â•°â”€ Binary (+)
    â”‚     â”œâ”€ Variable (x)
    â”‚     â•°â”€ Number (2)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("{call(true)}");
  let expected = indoc! {"
    â”œâ”€ Block
    â”‚  â•°â”€ Call
    â”‚     â”œâ”€ Callee
    â”‚     â”‚  â•°â”€ Variable (call)
    â”‚     â•°â”€ Argument
    â”‚        â•°â”€ Boolean (true)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn blocks_incompelete() {
  let allocator = Allocator::new();
  assert!(parse("{let x = 4\nx + 2", &allocator).is_err());
  assert!(parse("{}", &allocator).is_err());
  assert!(parse("{let a = 1}", &allocator).is_err());
  assert!(parse("{7", &allocator).is_err());
}

#[test]
fn call() {
  let ast = parse_to_string("function('hello world')");
  let expected = indoc! {"
    â”œâ”€ Call
    â”‚  â”œâ”€ Callee
    â”‚  â”‚  â•°â”€ Variable (function)
    â”‚  â•°â”€ Argument
    â”‚     â•°â”€ String 'hello world'
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("f ( 7 ) + 5");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Call
    â”‚  â”‚  â”œâ”€ Callee
    â”‚  â”‚  â”‚  â•°â”€ Variable (f)
    â”‚  â”‚  â•°â”€ Argument
    â”‚  â”‚     â•°â”€ Number (7)
    â”‚  â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("f(x) + 32.1");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Call
    â”‚  â”‚  â”œâ”€ Callee
    â”‚  â”‚  â”‚  â•°â”€ Variable (f)
    â”‚  â”‚  â•°â”€ Argument
    â”‚  â”‚     â•°â”€ Variable (x)
    â”‚  â•°â”€ Number (32.1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn call_missing_brackets_or_expression() {
  let allocator = Allocator::new();
  assert!(parse("f(", &allocator).is_err());
  assert!(parse("f(6", &allocator).is_err());

  assert!(parse("f()", &allocator).is_ok());
  assert!(parse("f ()", &allocator).is_ok());
  assert!(parse("f(\n)", &allocator).is_ok());

  assert!(parse("f(\n'hello')", &allocator).is_ok());
  assert!(parse("f('hello'\n)", &allocator).is_ok());
  assert!(parse("f(\n'hello'\n)", &allocator).is_ok());
}

#[test]
fn comment() {
  let ast = parse_to_string("5 // hello world");
  let expected = indoc! {"
    â”œâ”€ Comment (hello world)
    â”‚  â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn function() {
  let ast = parse_to_string("x => x + 1");
  let expected = indoc! {"
    â”œâ”€ Function: x =>
    â”‚  â•°â”€ Binary (+)
    â”‚     â”œâ”€ Variable (x)
    â”‚     â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("let plusOne = a => { a + 1 }");
  let expected = indoc! {"
    â”œâ”€ Let 'plusOne' =
    â”‚  â•°â”€ Function (plusOne): a =>
    â”‚     â•°â”€ Block
    â”‚        â•°â”€ Binary (+)
    â”‚           â”œâ”€ Variable (a)
    â”‚           â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn group() {
  let ast = parse_to_string("('hello world')");
  let expected = indoc! {"
    â”œâ”€ Group
    â”‚  â•°â”€ String 'hello world'
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("(4)");
  let expected = indoc! {"
    â”œâ”€ Group
    â”‚  â•°â”€ Number (4)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn if_() {
  let ast = parse_to_string("if (true) 7 else 5");
  let expected = indoc! {"
    â”œâ”€ If
    â”‚  â”œâ”€ Condition
    â”‚  â”‚  â•°â”€ Boolean (true)
    â”‚  â”œâ”€ Then
    â”‚  â”‚  â•°â”€ Number (7)
    â”‚  â•°â”€ Otherwise
    â”‚     â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("if (7 > x) doStuff else false");
  let expected = indoc! {"
    â”œâ”€ If
    â”‚  â”œâ”€ Condition
    â”‚  â”‚  â•°â”€ Binary (>)
    â”‚  â”‚     â”œâ”€ Number (7)
    â”‚  â”‚     â•°â”€ Variable (x)
    â”‚  â”œâ”€ Then
    â”‚  â”‚  â•°â”€ Variable (doStuff)
    â”‚  â•°â”€ Otherwise
    â”‚     â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn if_missing_parts() {
  let allocator = Allocator::new();
  assert!(parse("if 'hello')", &allocator).is_err());
  assert!(parse("if'hello')", &allocator).is_err());
  assert!(parse("if ('hello')", &allocator).is_err());
  assert!(parse("if('hello')", &allocator).is_err());
  assert!(parse("if ('hello'", &allocator).is_err());
  assert!(parse("if ('hello') then", &allocator).is_err());
  assert!(parse("if('hello') then", &allocator).is_err());
  assert!(parse("if(\n'hello') then", &allocator).is_err());
  assert!(parse("if('hello') then else", &allocator).is_err());

  assert!(parse("if ('hello') then else false", &allocator).is_ok());
  assert!(parse("if('hello') then else true", &allocator).is_ok());
  assert!(parse("if(\n'hello') then else x", &allocator).is_ok());
  assert!(parse("if('hello'\n) then else stuff", &allocator).is_ok());
  assert!(parse("if(\n'hello'\n) then else otherwise", &allocator).is_ok());
}

#[test]
fn group_no_end_bracket() {
  let allocator = Allocator::new();
  assert!(parse("(4 + 5 ", &allocator).is_err());
  assert!(parse("('hello'", &allocator).is_err());
  assert!(parse("(", &allocator).is_err());

  assert!(parse("('hello')", &allocator).is_ok());
  assert!(parse("(5)", &allocator).is_ok());
}

#[test]
fn literal() {
  let ast = parse_to_string("false");
  let expected = "â”œâ”€ Boolean (false)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("true");
  let expected = "â”œâ”€ Boolean (true)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("5.6");
  let expected = "â”œâ”€ Number (5.6)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("5_000.03");
  let expected = "â”œâ”€ Number (5000.03)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("'string'");
  let expected = "â”œâ”€ String 'string'\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("'string\nnew\nlines'");
  let expected = "â”œâ”€ String 'string\nnew\nlines'\n";
  assert_eq!(ast, expected);
}

#[test]
fn match_() {
  let ast = parse_to_string("match n | 1 -> 0");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ 1
    â”‚        â•°â”€ Number (0)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"
      match n
        | 1 -> 0
        | 2 -> 1
        | n -> n * 5
  "});
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ 1
    â”‚     â”‚  â•°â”€ Number (0)
    â”‚     â”œâ”€ Pattern â”€ 2
    â”‚     â”‚  â•°â”€ Number (1)
    â”‚     â•°â”€ Pattern â”€ n
    â”‚        â•°â”€ Binary (*)
    â”‚           â”œâ”€ Variable (n)
    â”‚           â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"
    match x
      | 0..1 -> 1
      | n -> n * 5
  "});
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (x)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ 0 .. 1
    â”‚     â”‚  â•°â”€ Number (1)
    â”‚     â•°â”€ Pattern â”€ n
    â”‚        â•°â”€ Binary (*)
    â”‚           â”œâ”€ Variable (n)
    â”‚           â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("match x | 0 -> 1\n// comment");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (x)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ 0
    â”‚        â•°â”€ Number (1)
    â”œâ”€ Comment (comment)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn match_missing_parts() {
  let allocator = Allocator::new();
  assert!(parse("match | 1 -> 2", &allocator).is_err());
  assert!(parse("match 3 | -5", &allocator).is_err());
  assert!(parse("match 3 1 -> 3", &allocator).is_err());
  assert!(parse("match 3 | 1 -> 3, 2 -> 4", &allocator).is_err());
  assert!(parse("match 3 | 1 -> 3\n 2 -> 4", &allocator).is_err());
  assert!(parse("match 3 | 1,", &allocator).is_err());
  assert!(parse("match true | .. -> 2", &allocator).is_err());

  assert!(parse("match true | 1 -> 2", &allocator).is_ok());
  assert!(parse("match 4 + 5 | ..9 -> 2", &allocator).is_ok());
  assert!(parse("match 4 + 5 | ..'z' -> 2", &allocator).is_ok());
  assert!(parse("match char | 'a'..'z' -> true | _ -> false", &allocator).is_ok());
  assert!(parse("match false | 1.. -> 2", &allocator).is_ok());
}

#[test]
fn unary() {
  let ast = parse_to_string("!false");
  let expected = indoc! {"
    â”œâ”€ Unary (!)
    â”‚  â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("-.5");
  let expected = indoc! {"
    â”œâ”€ Unary (-)
    â”‚  â•°â”€ Number (0.5)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn variable() {
  let ast = parse_to_string("a_long_variable");
  let expected = "â”œâ”€ Variable (a_long_variable)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("aLongVariable");
  let expected = "â”œâ”€ Variable (aLongVariable)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("count");
  let expected = "â”œâ”€ Variable (count)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("leaf");
  let expected = "â”œâ”€ Variable (leaf)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("igloo");
  let expected = "â”œâ”€ Variable (igloo)\n";
  assert_eq!(ast, expected);
}

#[test]
fn comment_statement() {
  let ast = parse_to_string("// comments");
  let expected = "â”œâ”€ Comment (comments)\n";
  assert_eq!(ast, expected);
}

#[test]
fn let_statement() {
  let ast = parse_to_string("let variable = 4 + 33");
  let expected = indoc! {"
    â”œâ”€ Let 'variable' =
    â”‚  â•°â”€ Binary (+)
    â”‚     â”œâ”€ Number (4)
    â”‚     â•°â”€ Number (33)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn let_statement_missing_parts() {
  let allocator = Allocator::new();
  assert!(parse("let = 7", &allocator).is_err());
  assert!(parse("let var", &allocator).is_err());
  assert!(parse("let var =", &allocator).is_err());
  assert!(parse("let var 7", &allocator).is_err());
  assert!(parse("let false = 7", &allocator).is_err());

  assert!(parse("let var = 7", &allocator).is_ok());
}

#[test]
fn pipeline_can_break_lines() {
  let ast = parse_to_string("5 \n    >> add3");
  let expected = indoc! {"
    â”œâ”€ Binary (>>)
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ Variable (add3)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("let x = 5 \n    >> add3\n>>times2");
  let expected = indoc! {"
    â”œâ”€ Let 'x' =
    â”‚  â•°â”€ Binary (>>)
    â”‚     â”œâ”€ Binary (>>)
    â”‚     â”‚  â”œâ”€ Number (5)
    â”‚     â”‚  â•°â”€ Variable (add3)
    â”‚     â•°â”€ Variable (times2)
  "};
  assert_eq!(ast, expected);
}

mod fault_tolerant {
  use super::{parse, Allocator};
  use indoc::indoc;

  #[test]
  fn let_statement_missing_identfier() {
    let allocator = Allocator::new();
    let ast = parse("let = 4 + 33", &allocator);
    let expected = indoc! {"
      â”œâ”€ Let '' =
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (4)
      â”‚     â•°â”€ Number (33)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn let_double_identifier() {
    let allocator = Allocator::new();
    let ast = parse("let x x + 33", &allocator);
    let expected = indoc! {"
       â”œâ”€ Let 'x' =
       â”‚  â•°â”€ Binary (+)
       â”‚     â”œâ”€ Variable (x)
       â”‚     â•°â”€ Number (33)
     "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn let_missing_equals() {
    let allocator = Allocator::new();
    let ast = parse("let x  4 + 33", &allocator);
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (4)
      â”‚     â•°â”€ Number (33)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
    assert_eq!(ast.errors.len(), 1);
  }

  #[test]
  fn let_wrong_identifier() {
    let allocator = Allocator::new();
    let ast = parse("let 4 = 5 + 33", &allocator);
    let expected = indoc! {"
      â”œâ”€ Let '' =
      â”‚  â•°â”€ Number (4)
      â”œâ”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn call_closing_bracket() {
    let allocator = Allocator::new();

    let ast = parse("func(4", &allocator);
    let expected = indoc! {"
      â”œâ”€ Call
      â”‚  â”œâ”€ Callee
      â”‚  â”‚  â•°â”€ Variable (func)
      â”‚  â•°â”€ Argument
      â”‚     â•°â”€ Number (4)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("func(\n", &allocator);
    let expected = indoc! {"
      â”œâ”€ Call
      â”‚  â”œâ”€ Callee
      â”‚  â”‚  â•°â”€ Variable (func)
      â”‚  â•°â”€ Argument
      â”‚     â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn group_closing_bracket() {
    let allocator = Allocator::new();

    let ast = parse("(4 + 1", &allocator);
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (4)
      â”‚     â•°â”€ Number (1)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("('hello'", &allocator);
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ String 'hello'
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn if_missing_brackets_or_else() {
    let allocator = Allocator::new();

    let expected = indoc! {"
      â”œâ”€ If
      â”‚  â”œâ”€ Condition
      â”‚  â”‚  â•°â”€ Boolean (true)
      â”‚  â”œâ”€ Then
      â”‚  â”‚  â•°â”€ Boolean (false)
      â”‚  â•°â”€ Otherwise
      â”‚     â•°â”€ Boolean (true)
    "};

    let ast = parse("if (true false else true", &allocator);
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("if true) false else true", &allocator);
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("if (true) false true", &allocator);
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn match_missing_initial_pipe_or_arrow() {
    let allocator = Allocator::new();

    let ast = parse("match 7 2.. -> true | _ false", &allocator);
    let expected = indoc! {"
      â”œâ”€ Match
      â”‚  â”œâ”€ Number (7)
      â”‚  â•°â”€ Cases:
      â”‚     â”œâ”€ Pattern â”€ 2 ..
      â”‚     â”‚  â•°â”€ Boolean (true)
      â”‚     â•°â”€ Pattern â”€ _
      â”‚        â•°â”€ Boolean (false)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn group_recovers() {
    let allocator = Allocator::new();

    let ast = parse("(Â¬)", &allocator);
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("(2 /+/ 5)", &allocator);
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Binary (/)
      â”‚     â”œâ”€ Binary (/)
      â”‚     â”‚  â”œâ”€ Number (2)
      â”‚     â”‚  â•°â”€ Invalid
      â”‚     â•°â”€ Number (5)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn let_statement_recovers() {
    let allocator = Allocator::new();

    let ast = parse("let x = Â¬\nlet b = 8", &allocator);
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â•°â”€ Invalid
      â”œâ”€ Let 'b' =
      â”‚  â•°â”€ Number (8)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn expression_statement_recovers() {
    let allocator = Allocator::new();

    let ast = parse("(5 5)+4\n3", &allocator);
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Number (5)
      â”œâ”€ Number (5)
      â”œâ”€ Invalid
      â”œâ”€ Number (3)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("3 Â¬ 4", &allocator);
    let expected = indoc! {"
      â”œâ”€ Number (3)
      â”œâ”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn block_expression_recovers() {
    let allocator = Allocator::new();

    let ast = parse("{5\nÂ¬4784Â¬}", &allocator);
    let expected = indoc! {"
      â”œâ”€ Block
      â”‚  â”œâ”€ Number (5)
      â”‚  â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("{5\nÂ¬4784Â¬\n4}", &allocator);
    let expected = indoc! {"
      â”œâ”€ Block
      â”‚  â”œâ”€ Number (5)
      â”‚  â”œâ”€ Invalid
      â”‚  â•°â”€ Number (4)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }
}
