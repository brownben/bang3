use crate::ast::AST;
use indoc::indoc;

fn parse(source: &str) -> AST {
  crate::parse(source.to_owned())
}
impl AST {
  fn is_ok(&self) -> bool {
    self.errors.is_empty()
  }

  fn is_err(&self) -> bool {
    !self.is_ok()
  }
}

fn parse_to_string(source: &str) -> String {
  crate::parse(source.to_owned()).to_string()
}

#[test]
fn space_at_end() {
  assert!(parse("22 + 44 ").is_ok());
  assert!(parse("22 + 44    ").is_ok());
  assert!(parse("22 + 44  \t  ").is_ok());
  assert!(parse("22 + 44\n\n\n").is_ok());
  assert!(parse("from string import { trim }\n\n\n").is_ok());
}

#[test]
fn empty_string() {
  assert!(parse("\n\n\n").is_ok());
  assert!(parse("    ").is_ok());
  assert!(parse("").is_ok());
  assert!(parse("  \n    \n   \n ").is_ok());
}

#[test]
fn unterminated_string() {
  assert!(parse("'unterminated string").is_err());
  assert!(parse("\"un").is_err());
  assert!(parse("`").is_err());

  assert!(parse("``").is_ok());
  assert!(parse("`hello world`").is_ok());
}

#[test]
fn unknown_character() {
  assert!(parse("Â¬").is_err());
  assert!(parse("3 $ 4").is_err());
  assert!(parse("3 Â¬ 4").is_err());
  assert!(parse("ðŸ¤—").is_err());
  assert!(parse(".-2").is_err());
  assert!(parse("&").is_err());

  // Having unknown characters in strings are fine
  assert!(parse("'Â¬'").is_ok());
  assert!(parse("'ðŸ¤—'").is_ok());
}

#[test]
fn binary() {
  let ast = parse_to_string("4 + 23");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Number (4)
    â”‚  â•°â”€ Number (23)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("'hello ' ++ 'world'");
  let expected = indoc! {"
    â”œâ”€ Binary (++)
    â”‚  â”œâ”€ String 'hello '
    â”‚  â•°â”€ String 'world'
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("4 * 56 >> 32");
  let expected = indoc! {"
    â”œâ”€ Binary (>>)
    â”‚  â”œâ”€ Binary (*)
    â”‚  â”‚  â”œâ”€ Number (4)
    â”‚  â”‚  â•°â”€ Number (56)
    â”‚  â•°â”€ Number (32)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("false or 6.12");
  let expected = indoc! {"
    â”œâ”€ Binary (or)
    â”‚  â”œâ”€ Boolean (false)
    â”‚  â•°â”€ Number (6.12)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("5 % 2 == 1 && 3 / 1");
  let expected = indoc! {"
    â”œâ”€ Binary (and)
    â”‚  â”œâ”€ Binary (==)
    â”‚  â”‚  â”œâ”€ Binary (%)
    â”‚  â”‚  â”‚  â”œâ”€ Number (5)
    â”‚  â”‚  â”‚  â•°â”€ Number (2)
    â”‚  â”‚  â•°â”€ Number (1)
    â”‚  â•°â”€ Binary (/)
    â”‚     â”œâ”€ Number (3)
    â”‚     â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn binary_precedence() {
  let ast = parse_to_string("1 + 2 * 3");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Number (1)
    â”‚  â•°â”€ Binary (*)
    â”‚     â”œâ”€ Number (2)
    â”‚     â•°â”€ Number (3)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("5 + 3 * 2");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ Binary (*)
    â”‚     â”œâ”€ Number (3)
    â”‚     â•°â”€ Number (2)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn binary_missing_left_expression() {
  assert!(parse("+ 5").is_err());
  assert!(parse("*").is_err());
  assert!(parse(" || 7").is_err());
}

#[test]
fn binary_missing_right_expression() {
  assert!(parse("4 +").is_err());
  assert!(parse("'hello' *").is_err());
  assert!(parse("false ||").is_err());
}

#[test]
fn blocks() {
  let ast = parse_to_string("{false}");
  let expected = indoc! {"
    â”œâ”€ Block
    â”‚  â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"{
    let x = 4
    x + 2
  }"});
  let expected = indoc! {"
    â”œâ”€ Block
    â”‚  â”œâ”€ Let 'x' =
    â”‚  â”‚  â•°â”€ Number (4)
    â”‚  â•°â”€ Binary (+)
    â”‚     â”œâ”€ Variable (x)
    â”‚     â•°â”€ Number (2)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("{call(true)}");
  let expected = indoc! {"
    â”œâ”€ Block
    â”‚  â•°â”€ Call
    â”‚     â”œâ”€ Callee
    â”‚     â”‚  â•°â”€ Variable (call)
    â”‚     â•°â”€ Argument
    â”‚        â•°â”€ Boolean (true)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn blocks_incompelete() {
  assert!(parse("{let x = 4\nx + 2").is_err());
  assert!(parse("{}").is_err());
  assert!(parse("{7").is_err());

  // must end in expression
  assert!(parse("{let a = 1}").is_err());
  assert!(parse("{let a = 1\n// comment\n}").is_err());
  assert!(parse("{1\n// comment\n}").is_ok());
}

#[test]
fn call() {
  let ast = parse_to_string("function('hello world')");
  let expected = indoc! {"
    â”œâ”€ Call
    â”‚  â”œâ”€ Callee
    â”‚  â”‚  â•°â”€ Variable (function)
    â”‚  â•°â”€ Argument
    â”‚     â•°â”€ String 'hello world'
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("f ( 7 ) + 5");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Call
    â”‚  â”‚  â”œâ”€ Callee
    â”‚  â”‚  â”‚  â•°â”€ Variable (f)
    â”‚  â”‚  â•°â”€ Argument
    â”‚  â”‚     â•°â”€ Number (7)
    â”‚  â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("f(x) + 32.1");
  let expected = indoc! {"
    â”œâ”€ Binary (+)
    â”‚  â”œâ”€ Call
    â”‚  â”‚  â”œâ”€ Callee
    â”‚  â”‚  â”‚  â•°â”€ Variable (f)
    â”‚  â”‚  â•°â”€ Argument
    â”‚  â”‚     â•°â”€ Variable (x)
    â”‚  â•°â”€ Number (32.1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn call_missing_brackets_or_expression() {
  assert!(parse("f(").is_err());
  assert!(parse("f(6").is_err());

  assert!(parse("f()").is_ok());
  assert!(parse("f ()").is_ok());
  assert!(parse("f(\n)").is_ok());

  assert!(parse("f(\n'hello')").is_ok());
  assert!(parse("f('hello'\n)").is_ok());
  assert!(parse("f(\n'hello'\n)").is_ok());
}

#[test]
fn comment() {
  let ast = parse_to_string("5 // hello world");
  let expected = indoc! {"
    â”œâ”€ Comment (hello world)
    â”‚  â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let comment_in_call = parse_to_string(indoc! {"
    print(
      5 // hello world
    )
  "});
  let expected = indoc! {"
    â”œâ”€ Call
    â”‚  â”œâ”€ Callee
    â”‚  â”‚  â•°â”€ Variable (print)
    â”‚  â•°â”€ Argument
    â”‚     â•°â”€ Comment (hello world)
    â”‚        â•°â”€ Number (5)
  "};
  assert_eq!(comment_in_call, expected);
}

#[test]
fn function() {
  let ast = parse_to_string("x => x + 1");
  let expected = indoc! {"
    â”œâ”€ Function: x =>
    â”‚  â•°â”€ Binary (+)
    â”‚     â”œâ”€ Variable (x)
    â”‚     â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("let plusOne = a => { a + 1 }");
  let expected = indoc! {"
    â”œâ”€ Let 'plusOne' =
    â”‚  â•°â”€ Function (plusOne): a =>
    â”‚     â•°â”€ Block
    â”‚        â•°â”€ Binary (+)
    â”‚           â”œâ”€ Variable (a)
    â”‚           â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn group() {
  let ast = parse_to_string("('hello world')");
  let expected = indoc! {"
    â”œâ”€ Group
    â”‚  â•°â”€ String 'hello world'
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("(4)");
  let expected = indoc! {"
    â”œâ”€ Group
    â”‚  â•°â”€ Number (4)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn if_() {
  let ast = parse_to_string("if (true) 7 else 5");
  let expected = indoc! {"
    â”œâ”€ If
    â”‚  â”œâ”€ Condition
    â”‚  â”‚  â•°â”€ Boolean (true)
    â”‚  â”œâ”€ Then
    â”‚  â”‚  â•°â”€ Number (7)
    â”‚  â•°â”€ Otherwise
    â”‚     â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("if (7 > x) doStuff else false");
  let expected = indoc! {"
    â”œâ”€ If
    â”‚  â”œâ”€ Condition
    â”‚  â”‚  â•°â”€ Binary (>)
    â”‚  â”‚     â”œâ”€ Number (7)
    â”‚  â”‚     â•°â”€ Variable (x)
    â”‚  â”œâ”€ Then
    â”‚  â”‚  â•°â”€ Variable (doStuff)
    â”‚  â•°â”€ Otherwise
    â”‚     â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("if (true) false");
  let expected = indoc! {"
    â”œâ”€ If
    â”‚  â”œâ”€ Condition
    â”‚  â”‚  â•°â”€ Boolean (true)
    â”‚  â•°â”€ Then
    â”‚     â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn if_missing_parts() {
  assert!(parse("if 'hello')").is_err());
  assert!(parse("if'hello')").is_err());
  assert!(parse("if ('hello')").is_err());
  assert!(parse("if('hello')").is_err());
  assert!(parse("if ('hello'").is_err());
  assert!(parse("if('hello') then else").is_err());

  assert!(parse("if ('hello') then else false").is_ok());
  assert!(parse("if('hello') then else true").is_ok());
  assert!(parse("if(\n'hello') then else x").is_ok());
  assert!(parse("if('hello'\n) then else stuff").is_ok());
  assert!(parse("if(\n'hello'\n) then else otherwise").is_ok());

  // no else branch
  assert!(parse("if ('hello') then").is_ok());
  assert!(parse("if('hello') then").is_ok());
  assert!(parse("if(\n'hello') then").is_ok());
}

#[test]
fn group_no_end_bracket() {
  assert!(parse("(4 + 5 ").is_err());
  assert!(parse("('hello'").is_err());
  assert!(parse("(").is_err());

  assert!(parse("('hello')").is_ok());
  assert!(parse("(5)").is_ok());
}

#[test]
fn literal() {
  let ast = parse_to_string("false");
  let expected = "â”œâ”€ Boolean (false)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("true");
  let expected = "â”œâ”€ Boolean (true)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("5.6");
  let expected = "â”œâ”€ Number (5.6)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string(".6");
  let expected = "â”œâ”€ Number (0.6)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("01.6");
  let expected = "â”œâ”€ Number (1.6)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("-4.5");
  let expected = "â”œâ”€ Number (-4.5)\n";
  assert_eq!(ast, expected);

  assert!(parse("1.").is_err());
  assert!(parse("01.").is_err());
  assert!(parse("55.").is_err());
  assert!(parse("01.0").is_ok());
  assert!(parse("55.0000").is_ok());

  let ast = parse_to_string("5.");
  let expected = "â”œâ”€ Number (5)\nâ”œâ”€ Invalid\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("5_000.03");
  let expected = "â”œâ”€ Number (5000.03)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("'string'");
  let expected = "â”œâ”€ String 'string'\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("'string\nnew\nlines'");
  let expected = "â”œâ”€ String 'string\nnew\nlines'\n";
  assert_eq!(ast, expected);
}

#[test]
fn match_() {
  let ast = parse_to_string("match n | 1 -> 0");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ 1
    â”‚        â•°â”€ Number (0)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"
      match n
        | 1 -> 0
        | 2 -> 1
        | n -> n * 5
  "});
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ 1
    â”‚     â”‚  â•°â”€ Number (0)
    â”‚     â”œâ”€ Pattern â”€ 2
    â”‚     â”‚  â•°â”€ Number (1)
    â”‚     â•°â”€ Pattern â”€ n
    â”‚        â•°â”€ Binary (*)
    â”‚           â”œâ”€ Variable (n)
    â”‚           â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"
    match x
      | 0..1 -> 1
      | n -> n * 5
  "});
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (x)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ 0 .. 1
    â”‚     â”‚  â•°â”€ Number (1)
    â”‚     â•°â”€ Pattern â”€ n
    â”‚        â•°â”€ Binary (*)
    â”‚           â”œâ”€ Variable (n)
    â”‚           â•°â”€ Number (5)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("match x | 0 -> 1\n// comment");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (x)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ 0
    â”‚        â•°â”€ Number (1)
    â”œâ”€ Comment (comment)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn match_with_guard() {
  let ast = parse_to_string("match n | 1 if x -> 0");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ 1
    â”‚        â”œâ”€ Guard
    â”‚        â”‚  â•°â”€ Variable (x)
    â”‚        â•°â”€ Number (0)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("match n | 1 if x -> 0 | 2 if y -> 1");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ 1
    â”‚     â”‚  â”œâ”€ Guard
    â”‚     â”‚  â”‚  â•°â”€ Variable (x)
    â”‚     â”‚  â•°â”€ Number (0)
    â”‚     â•°â”€ Pattern â”€ 2
    â”‚        â”œâ”€ Guard
    â”‚        â”‚  â•°â”€ Variable (y)
    â”‚        â•°â”€ Number (1)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn pattern_negative_numbers() {
  let ast = parse_to_string("match n | -4.6 -> 0");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ -4.6
    â”‚        â•°â”€ Number (0)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("match n | -1 if x -> 0");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â•°â”€ Pattern â”€ -1
    â”‚        â”œâ”€ Guard
    â”‚        â”‚  â•°â”€ Variable (x)
    â”‚        â•°â”€ Number (0)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("match n | -4.6.. -> 0 | -4.6..-56 -> 1 | ..-5.5544 -> 2");
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (n)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ -4.6 ..
    â”‚     â”‚  â•°â”€ Number (0)
    â”‚     â”œâ”€ Pattern â”€ -4.6 .. -56
    â”‚     â”‚  â•°â”€ Number (1)
    â”‚     â•°â”€ Pattern â”€ .. -5.5544
    â”‚        â•°â”€ Number (2)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn pattern_lists() {
  let ast = parse(indoc! {"
    match value
    | [] -> 0
    | [x] -> 1
    | [x, ..y] -> 2
    | [..x] -> 3
    | [x, ..y,] -> 4
    | [x,] -> 5
  "});
  let expected = indoc! {"
    â”œâ”€ Match
    â”‚  â”œâ”€ Variable (value)
    â”‚  â•°â”€ Cases:
    â”‚     â”œâ”€ Pattern â”€ []
    â”‚     â”‚  â•°â”€ Number (0)
    â”‚     â”œâ”€ Pattern â”€ [x]
    â”‚     â”‚  â•°â”€ Number (1)
    â”‚     â”œâ”€ Pattern â”€ [x, ..y]
    â”‚     â”‚  â•°â”€ Number (2)
    â”‚     â”œâ”€ Pattern â”€ [..x]
    â”‚     â”‚  â•°â”€ Number (3)
    â”‚     â”œâ”€ Pattern â”€ [x, ..y]
    â”‚     â”‚  â•°â”€ Number (4)
    â”‚     â•°â”€ Pattern â”€ [x]
    â”‚        â•°â”€ Number (5)
  "};
  assert!(ast.is_ok());
  assert_eq!(ast.to_string(), expected);

  let empty_no_closing_bracket = "match x | [ -> 3";
  assert!(parse(empty_no_closing_bracket).is_err());
  let identifier_no_closing = "match x | [x -> 3";
  assert!(parse(identifier_no_closing).is_err());
  let more_than_one_identifier = "match x | [x, y, z] -> 3";
  assert!(parse(more_than_one_identifier).is_err());
  let nested_literal = "match x | [3] -> 3";
  assert!(parse(nested_literal).is_err());
  let two_vars_no_rest = "match x | [x, y] -> 3";
  assert!(parse(two_vars_no_rest).is_err());
}

#[test]
fn match_missing_parts() {
  assert!(parse("match | 1 -> 2").is_err());
  assert!(parse("match 3 | -5").is_err());
  assert!(parse("match 3 1 -> 3").is_err());
  assert!(parse("match 3 | 1 -> 3, 2 -> 4").is_err());
  assert!(parse("match 3 | 1 -> 3\n 2 -> 4").is_err());
  assert!(parse("match 3 | 1,").is_err());
  assert!(parse("match true | .. -> 2").is_err());

  assert!(parse("match true | 1 -> 2").is_ok());
  assert!(parse("match 4 + 5 | ..9 -> 2").is_ok());
  assert!(parse("match 4 + 5 | ..'z' -> 2").is_ok());
  assert!(parse("match char | 'a'..'z' -> true | _ -> false").is_ok());
  assert!(parse("match false | 1.. -> 2").is_ok());
}

#[test]
fn unary() {
  let ast = parse_to_string("!false");
  let expected = indoc! {"
    â”œâ”€ Unary (!)
    â”‚  â•°â”€ Boolean (false)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("- .5");
  let expected = indoc! {"
    â”œâ”€ Unary (-)
    â”‚  â•°â”€ Number (0.5)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn variable() {
  let ast = parse_to_string("a_long_variable");
  let expected = "â”œâ”€ Variable (a_long_variable)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("aLongVariable");
  let expected = "â”œâ”€ Variable (aLongVariable)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("count");
  let expected = "â”œâ”€ Variable (count)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("leaf");
  let expected = "â”œâ”€ Variable (leaf)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string("igloo");
  let expected = "â”œâ”€ Variable (igloo)\n";
  assert_eq!(ast, expected);
}

#[test]
fn comment_statement() {
  let ast = parse_to_string("// comments");
  let expected = "â”œâ”€ Comment (comments)\n";
  assert_eq!(ast, expected);

  let ast = parse_to_string(indoc! {"
    // all of these
    // comments
    // form a single block

    // this is a different block
  "});
  let expected = indoc! {"
    â”œâ”€ Comment (all of these comments form a single block)
    â”œâ”€ Comment (this is a different block)
  "};
  assert_eq!(ast, expected);

  // doc comments
  let ast = parse_to_string(indoc! {"
    // all of these
    // comments
    // form a single block
    let a = 1

    // this is a different block
    let function = x => x + 1

    // this is not a doc comment

    let b = 1
    // neither is this
  "});
  let expected = indoc! {"
    â”œâ”€ Comment (all of these comments form a single block)
    â”œâ”€ Let 'a' =
    â”‚  â•°â”€ Number (1)
    â”œâ”€ Comment (this is a different block)
    â”œâ”€ Let 'function' =
    â”‚  â•°â”€ Function (function): x =>
    â”‚     â•°â”€ Binary (+)
    â”‚        â”œâ”€ Variable (x)
    â”‚        â•°â”€ Number (1)
    â”œâ”€ Comment (this is not a doc comment)
    â”œâ”€ Let 'b' =
    â”‚  â•°â”€ Number (1)
    â”œâ”€ Comment (neither is this)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn let_statement() {
  let ast = parse_to_string("let variable = 4 + 33");
  let expected = indoc! {"
    â”œâ”€ Let 'variable' =
    â”‚  â•°â”€ Binary (+)
    â”‚     â”œâ”€ Number (4)
    â”‚     â•°â”€ Number (33)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn let_statement_missing_parts() {
  assert!(parse("let = 7").is_err());
  assert!(parse("let var").is_err());
  assert!(parse("let var =").is_err());
  assert!(parse("let var 7").is_err());
  assert!(parse("let false = 7").is_err());

  assert!(parse("let var = 7").is_ok());
}

#[test]
fn pipeline_can_break_lines() {
  let ast = parse("5 \n    >> add3");
  let expected = indoc! {"
    â”œâ”€ Binary (>>)
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ Variable (add3)
  "};
  assert!(ast.is_ok());
  assert_eq!(ast.to_string(), expected);

  let ast = parse("let x = 5 \n    >> add3\n>>times2");
  let expected = indoc! {"
    â”œâ”€ Let 'x' =
    â”‚  â•°â”€ Binary (>>)
    â”‚     â”œâ”€ Binary (>>)
    â”‚     â”‚  â”œâ”€ Number (5)
    â”‚     â”‚  â•°â”€ Variable (add3)
    â”‚     â•°â”€ Variable (times2)
  "};
  assert!(ast.is_ok());
  assert_eq!(ast.to_string(), expected);

  let ast = parse(indoc! {"
    let x = (
      5
        >> add3
        >> times2
    )
  "});
  let expected = indoc! {"
    â”œâ”€ Let 'x' =
    â”‚  â•°â”€ Group
    â”‚     â•°â”€ Binary (>>)
    â”‚        â”œâ”€ Binary (>>)
    â”‚        â”‚  â”œâ”€ Number (5)
    â”‚        â”‚  â•°â”€ Variable (add3)
    â”‚        â•°â”€ Variable (times2)
  "};
  assert!(ast.is_ok());
  assert_eq!(ast.to_string(), expected);
}

#[test]
fn chained_pipelines() {
  let ast = parse_to_string("5 >> x => x * 5 >> addOne");
  let expected = indoc! {"
    â”œâ”€ Binary (>>)
    â”‚  â”œâ”€ Binary (>>)
    â”‚  â”‚  â”œâ”€ Number (5)
    â”‚  â”‚  â•°â”€ Function: x =>
    â”‚  â”‚     â•°â”€ Binary (*)
    â”‚  â”‚        â”œâ”€ Variable (x)
    â”‚  â”‚        â•°â”€ Number (5)
    â”‚  â•°â”€ Variable (addOne)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("5 >> x => (x * 5 >> addOne)");
  let expected = indoc! {"
    â”œâ”€ Binary (>>)
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ Function: x =>
    â”‚     â•°â”€ Group
    â”‚        â•°â”€ Binary (>>)
    â”‚           â”œâ”€ Binary (*)
    â”‚           â”‚  â”œâ”€ Variable (x)
    â”‚           â”‚  â•°â”€ Number (5)
    â”‚           â•°â”€ Variable (addOne)
  "};
  assert_eq!(ast, expected);
}

#[test]
fn format_string() {
  let skip_no_format = parse_to_string("`standard string`");
  let expected = indoc! {"
    â”œâ”€ String 'standard string'
  "};
  assert_eq!(skip_no_format, expected);

  let standard_string = parse_to_string("'standard {string}}'");
  let expected = indoc! {"
    â”œâ”€ String 'standard {string}}'
  "};
  assert_eq!(standard_string, expected);

  let one_field = parse_to_string("`hello {5} people`");
  let expected = indoc! {"
    â”œâ”€ Format String
    â”‚  â”œâ”€ 'hello '
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ ' people'
  "};
  assert_eq!(one_field, expected);

  let no_front_padding = parse_to_string("`{  5 } people`");
  let expected = indoc! {"
    â”œâ”€ Format String
    â”‚  â”œâ”€ ''
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ ' people'
  "};
  assert_eq!(no_front_padding, expected);

  let no_end_padding = parse_to_string("`hello {5  }`");
  let expected = indoc! {"
    â”œâ”€ Format String
    â”‚  â”œâ”€ 'hello '
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ ''
  "};
  assert_eq!(no_end_padding, expected);

  let with_group = parse_to_string("`hello {(5)}`");
  let expected = indoc! {"
    â”œâ”€ Format String
    â”‚  â”œâ”€ 'hello '
    â”‚  â”œâ”€ Group
    â”‚  â”‚  â•°â”€ Number (5)
    â”‚  â•°â”€ ''
  "};
  assert_eq!(with_group, expected);

  let with_block = parse_to_string("`hello {{5}}`");
  let expected = indoc! {"
    â”œâ”€ Format String
    â”‚  â”œâ”€ 'hello '
    â”‚  â”œâ”€ Block
    â”‚  â”‚  â•°â”€ Number (5)
    â”‚  â•°â”€ ''
  "};
  assert_eq!(with_block, expected);

  let two_fields = parse_to_string("`hello {5} + {1} people`");
  let expected = indoc! {"
    â”œâ”€ Format String
    â”‚  â”œâ”€ 'hello '
    â”‚  â”œâ”€ Number (5)
    â”‚  â”œâ”€ ' + '
    â”‚  â”œâ”€ Number (1)
    â”‚  â•°â”€ ' people'
  "};
  assert_eq!(two_fields, expected);

  let unterminated = parse("`hello {5} + {1} peop");
  assert!(unterminated.is_err());

  let no_expression = parse("`hello {}`");
  assert!(no_expression.is_err());

  let missing_end_curly = parse("`hello {5 `");
  assert!(missing_end_curly.is_err());
}

#[test]
fn return_statement() {
  let ast = parse_to_string("_ => { return 4 }");
  let expected = indoc! {"
    â”œâ”€ Function: _ =>
    â”‚  â•°â”€ Block
    â”‚     â•°â”€ Return
    â”‚        â•°â”€ Number (4)
  "};
  assert_eq!(ast, expected);

  // outside of a function
  assert!(parse("return 5").is_err());
  assert!(parse("{ return 5 }").is_err());

  // no return value
  assert!(parse("_ => { return }").is_err());
  assert!(parse("_ => { return & }").is_err());
}

#[test]
fn import_statement() {
  let ast = parse_to_string("from maths import { sin, cos, tan }");
  let expected = indoc! {"
    â”œâ”€ From 'maths' Import
    â”‚  â”œâ”€ sin
    â”‚  â”œâ”€ cos
    â”‚  â•°â”€ tan
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("from maths import {\n sin,\n cos,\n tan,\n}");
  let expected = indoc! {"
    â”œâ”€ From 'maths' Import
    â”‚  â”œâ”€ sin
    â”‚  â”œâ”€ cos
    â”‚  â•°â”€ tan
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("from strings import { split }");
  let expected = indoc! {"
    â”œâ”€ From 'strings' Import
    â”‚  â•°â”€ split
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("from strings import { TAB as tab }");
  let expected = indoc! {"
    â”œâ”€ From 'strings' Import
    â”‚  â•°â”€ TAB as tab
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("from strings import {  }");
  let expected = indoc! {"
    â”œâ”€ From 'strings' Import
  "};
  assert_eq!(ast, expected);

  assert!(parse("from 4 import { x }").is_err());
  assert!(parse("from import { x }").is_err());
  assert!(parse("import x").is_err());
  assert!(parse("from maths { sin, cos }").is_err());

  // Block can't end with import
  assert!(parse("{ from maths import { sin } }").is_err());
  assert!(parse("{ from maths import { sin }\n sin(5) }").is_ok());
  assert!(parse("{ from maths import { sin, }\n sin(5) }").is_ok());

  // aliasing imports
  assert!(parse("from maths import { sin as }").is_err());
  assert!(parse("from maths import { sin as 7 }").is_err());

  // keyword imports
  assert!(parse("from string import { from }").is_err());
  assert!(parse("from string import { from as }").is_err());
  assert!(parse("from string import { from as from_ }").is_ok());
  assert!(parse("from string import { from as from_, }").is_ok());
  let ast = parse_to_string("from string import { from as toString, trim }");
  assert_eq!(ast, indoc! {"
    â”œâ”€ From 'string' Import
    â”‚  â”œâ”€ from as toString
    â”‚  â•°â”€ trim
  "});
}

#[test]
fn module_access() {
  let ast = parse_to_string("maths::sin");
  let expected = indoc! {"
    â”œâ”€ Module Access (maths::sin)
  "};
  assert_eq!(ast, expected);

  let ast = parse_to_string("string::length('hello')");
  let expected = indoc! {"
    â”œâ”€ Call
    â”‚  â”œâ”€ Callee
    â”‚  â”‚  â•°â”€ Module Access (string::length)
    â”‚  â•°â”€ Argument
    â”‚     â•°â”€ String 'hello'
  "};
  assert_eq!(ast, expected);

  assert!(parse("::sin").is_err());
  assert!(parse("maths::5").is_err());
  assert!(parse("maths::").is_err());
}

#[test]
fn list() {
  let empty_list = parse("[]");
  assert!(empty_list.is_valid());
  assert_eq!(empty_list.to_string(), indoc! {"
    â”œâ”€ List
  "});

  let empty_list_with_space = parse("[\n\n\n  \n]");
  assert!(empty_list_with_space.is_valid());
  assert_eq!(empty_list_with_space.to_string(), indoc! {"
    â”œâ”€ List
  "});

  let single_number = parse("[5]");
  assert!(single_number.is_valid());
  assert_eq!(single_number.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â•°â”€ Number (5)
  "});

  let single_number_trailing_comma = parse("[5,]");
  assert!(single_number_trailing_comma.is_valid());
  assert_eq!(single_number_trailing_comma.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â•°â”€ Number (5)
  "});

  let single_number_new_line = parse("[\n  5,\n]");
  assert!(single_number_new_line.is_valid());
  assert_eq!(single_number_new_line.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â•°â”€ Number (5)
  "});

  let extra_comma = parse("[\n  5,,,\n]");
  assert!(!extra_comma.is_valid());
  assert_eq!(extra_comma.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â”œâ”€ Number (5)
    â”‚  â•°â”€ Invalid
  "});

  let multiple_numbers = parse("[5, 6, 7]");
  assert!(multiple_numbers.is_valid());
  assert_eq!(multiple_numbers.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â”œâ”€ Number (5)
    â”‚  â”œâ”€ Number (6)
    â”‚  â•°â”€ Number (7)
  "});

  let missing_end_bracket = parse("[5, 6, 7");
  assert!(!missing_end_bracket.is_valid());
  assert_eq!(missing_end_bracket.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â”œâ”€ Number (5)
    â”‚  â”œâ”€ Number (6)
    â”‚  â•°â”€ Number (7)
  "});

  let complex_expression = parse("[x => x + 1, print(55 + 2)]");
  assert!(complex_expression.is_valid());
  assert_eq!(complex_expression.to_string(), indoc! {"
    â”œâ”€ List
    â”‚  â”œâ”€ Function: x =>
    â”‚  â”‚  â•°â”€ Binary (+)
    â”‚  â”‚     â”œâ”€ Variable (x)
    â”‚  â”‚     â•°â”€ Number (1)
    â”‚  â•°â”€ Call
    â”‚     â”œâ”€ Callee
    â”‚     â”‚  â•°â”€ Variable (print)
    â”‚     â•°â”€ Argument
    â”‚        â•°â”€ Binary (+)
    â”‚           â”œâ”€ Number (55)
    â”‚           â•°â”€ Number (2)
  "});
}

mod fault_tolerant {
  use super::parse;
  use indoc::indoc;

  #[test]
  fn let_statement_missing_identfier() {
    let ast = parse("let = 4 + 33");
    let expected = indoc! {"
      â”œâ”€ Let '' =
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (4)
      â”‚     â•°â”€ Number (33)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn let_double_identifier() {
    let ast = parse("let x x + 33");
    let expected = indoc! {"
       â”œâ”€ Let 'x' =
       â”‚  â•°â”€ Binary (+)
       â”‚     â”œâ”€ Variable (x)
       â”‚     â•°â”€ Number (33)
     "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn let_missing_equals() {
    let ast = parse("let x  4 + 33");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (4)
      â”‚     â•°â”€ Number (33)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
    assert_eq!(ast.errors.len(), 1);
  }

  #[test]
  fn let_wrong_identifier() {
    let ast = parse("let 4 = 5 + 33");
    let expected = indoc! {"
      â”œâ”€ Let '4' =
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (5)
      â”‚     â•°â”€ Number (33)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn call_closing_bracket() {
    let ast = parse("func(4");
    let expected = indoc! {"
      â”œâ”€ Call
      â”‚  â”œâ”€ Callee
      â”‚  â”‚  â•°â”€ Variable (func)
      â”‚  â•°â”€ Argument
      â”‚     â•°â”€ Number (4)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("func(\n");
    let expected = indoc! {"
      â”œâ”€ Call
      â”‚  â”œâ”€ Callee
      â”‚  â”‚  â•°â”€ Variable (func)
      â”‚  â•°â”€ Argument
      â”‚     â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn group_closing_bracket() {
    let ast = parse("(4 + 1");
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Binary (+)
      â”‚     â”œâ”€ Number (4)
      â”‚     â•°â”€ Number (1)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("('hello'");
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ String 'hello'
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn if_missing_brackets_or_else() {
    let expected = indoc! {"
      â”œâ”€ If
      â”‚  â”œâ”€ Condition
      â”‚  â”‚  â•°â”€ Boolean (true)
      â”‚  â”œâ”€ Then
      â”‚  â”‚  â•°â”€ Boolean (false)
      â”‚  â•°â”€ Otherwise
      â”‚     â•°â”€ Boolean (true)
    "};

    let ast = parse("if (true false else true");
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("if true) false else true");
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn match_missing_initial_pipe_or_arrow() {
    let ast = parse("match 7 2.. -> true | _ false");
    let expected = indoc! {"
      â”œâ”€ Match
      â”‚  â”œâ”€ Number (7)
      â”‚  â•°â”€ Cases:
      â”‚     â”œâ”€ Pattern â”€ 2 ..
      â”‚     â”‚  â•°â”€ Boolean (true)
      â”‚     â•°â”€ Pattern â”€ _
      â”‚        â•°â”€ Boolean (false)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn group_recovers() {
    let ast = parse("(Â¬)");
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("(2 /+/ 5)");
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Binary (/)
      â”‚     â”œâ”€ Binary (/)
      â”‚     â”‚  â”œâ”€ Number (2)
      â”‚     â”‚  â•°â”€ Invalid
      â”‚     â•°â”€ Number (5)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn empty_group() {
    let ast = parse("()");
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn let_statement_recovers() {
    let ast = parse("let x = Â¬\nlet b = 8");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â•°â”€ Invalid
      â”œâ”€ Let 'b' =
      â”‚  â•°â”€ Number (8)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn expression_statement_recovers() {
    let ast = parse("(5 5)+4\n3");
    let expected = indoc! {"
      â”œâ”€ Group
      â”‚  â•°â”€ Number (5)
      â”œâ”€ Number (5)
      â”œâ”€ Invalid
      â”œâ”€ Number (3)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("3 Â¬ 4");
    let expected = indoc! {"
      â”œâ”€ Number (3)
      â”œâ”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn block_expression_recovers() {
    let ast = parse("{5\nÂ¬4784Â¬}");
    let expected = indoc! {"
      â”œâ”€ Block
      â”‚  â”œâ”€ Number (5)
      â”‚  â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("{5\nÂ¬4784Â¬\n4}");
    let expected = indoc! {"
      â”œâ”€ Block
      â”‚  â”œâ”€ Number (5)
      â”‚  â”œâ”€ Invalid
      â”‚  â•°â”€ Number (4)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("{let x = 5}");
    let expected = indoc! {"
      â”œâ”€ Block
      â”‚  â•°â”€ Let 'x' =
      â”‚     â•°â”€ Number (5)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn known_token_misused_as_binary_operator() {
    let ast = parse("a -> 5");
    let expected = indoc! {"
      â”œâ”€ Variable (a)
      â”œâ”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn single_equals_as_binary_operator() {
    let ast = parse("a = 5");
    let expected = indoc! {"
      â”œâ”€ Binary (=)
      â”‚  â”œâ”€ Variable (a)
      â”‚  â•°â”€ Number (5)
    "};
    assert!(ast.is_err());
    assert!(ast.errors.len() == 1);
    assert_eq!(ast.to_string(), expected);

    let ast = parse("4 = 5");
    let expected = indoc! {"
      â”œâ”€ Binary (=)
      â”‚  â”œâ”€ Number (4)
      â”‚  â•°â”€ Number (5)
    "};
    assert!(ast.is_err());
    assert!(ast.errors.len() == 1);
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn import_statement() {
    let ast = parse("from 4 import { xx");
    let expected = indoc! {"
      â”œâ”€ From '4' Import
      â”‚  â•°â”€ xx
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }
}

#[test]
fn multibyte_utf8_characters() {
  let two_byte_a = "a Â± b";
  let error_span = parse(two_byte_a).errors.first().unwrap().span();
  assert_eq!(error_span.source_text(two_byte_a), "Â±");

  let two_byte_b = "a Â© b";
  let error_span = parse(two_byte_b).errors.first().unwrap().span();
  assert_eq!(error_span.source_text(two_byte_b), "Â©");

  let three_byte = "c à € b";
  let error_span = parse(three_byte).errors.first().unwrap().span();
  assert_eq!(error_span.source_text(three_byte), "à €");

  let four_byte = "d ðŸŒˆ b";
  let error_span = parse(four_byte).errors.first().unwrap().span();
  assert_eq!(error_span.source_text(four_byte), "ðŸŒˆ");
}

mod types {
  use super::*;

  #[test]
  fn primitives() {
    let ast = parse("let x: boolean = true");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: boolean
      â”‚  â•°â”€ Boolean (true)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: number = 5");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: number
      â”‚  â•°â”€ Number (5)
     "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: string = 'hello'");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: string
      â”‚  â•°â”€ String 'hello'
     "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: unknown = 'hello'");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: unknown
      â”‚  â•°â”€ String 'hello'
     "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: never = 'hello'");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: never
      â”‚  â•°â”€ String 'hello'
     "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn type_variable() {
    let ast = parse("let x: ^a = 4");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: ^a
      â”‚  â•°â”€ Number (4)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: ^ = 4");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: Invalid
      â”‚  â•°â”€ Number (4)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn group() {
    let ast = parse("let x: (number) = true");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: (number)
      â”‚  â•°â”€ Boolean (true)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: (number => string) = true");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: (number => string)
      â”‚  â•°â”€ Boolean (true)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: (number => string = true");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: (number => string)
      â”‚  â•°â”€ Boolean (true)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn empty_group() {
    let ast = parse("let x: () = true");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: (Invalid)
      â”‚  â•°â”€ Boolean (true)
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn function() {
    let ast = parse("let x: _ => number = _ => 4");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: _ => number
      â”‚  â•°â”€ Function (x): _ =>
      â”‚     â•°â”€ Number (4)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: _ => number => number = _ => 4");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: _ => number => number
      â”‚  â•°â”€ Function (x): _ =>
      â”‚     â•°â”€ Number (4)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);
  }

  #[test]
  fn structure() {
    let ast = parse("let x: number<number> = _ => 4");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: number<number>
      â”‚  â•°â”€ Function (x): _ =>
      â”‚     â•°â”€ Number (4)
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: list<list<(string)>> => number => list<string> = ''");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: list<list<(string)>> => number => list<string>
      â”‚  â•°â”€ String ''
    "};
    assert!(ast.is_ok());
    assert_eq!(ast.to_string(), expected);

    let ast = parse("let x: list<(list<list<list<number>>>)> = [[1]]");
    assert!(ast.is_ok());
    let ast = parse("let x: list<list<list<list<number>>>> = [[1]]");
    assert!(ast.is_ok());
    let ast = parse("let x: list<list<list<number>>> = [[1]]");
    assert!(ast.is_ok());
  }

  #[test]
  fn invalid() {
    let ast = parse("let x: >= = true");
    let expected = indoc! {"
      â”œâ”€ Let 'x' =
      â”‚  â”œâ”€ Type: Invalid
      â”‚  â•°â”€ Invalid
    "};
    assert!(ast.is_err());
    assert_eq!(ast.to_string(), expected);
  }
}
