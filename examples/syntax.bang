// ==========================
// Basic Types
// ==========================

// There are 7 different types:
// - Strings
// - Numbers
// - Booleans
// - Functions

// Strings
// ==========================

'They can have single quotes'
"or they can have double quotes"
`or even backticks`
'they
  can
    even
      span
    multiple
  lines'

'hello' == "hello" // true
'cat' > 'bat'      // true
'he' ++ 'llo'       // 'hello'
(!"")              // true
(!'stuff')         // false

// Numbers
// ==========================

// are stored as f64. Can have underscores separating digits.
125.3
152
1_000_000
-5.63
.25

2.5 + 1.2   // 3.7
5 - 2       // 3
5.2 / 2     // 2.6
8 * 3       // 24
2.5 == 2.5  // true
2.5 != 2.5  // false
5 > 3       // true
5 >= 3      // true
5 < 7       // true
5 <= 5      // true
(!0)        // true
(!1)        // false


// Booleans
// ==========================

true
false

(!true)         // false
true != false // true


// Functions
// ==========================

// Take a single parameter

// Can be defined with a single line as the body
x => 3 + 5

// Functions are only equal to themselves.
(_ => 3) != (_ => 3)

// Are always truthy
(!!(_ => 3))   // true

// Functions are called with brackets, and always have an argument
(_ => 3)(0)        // 3
(x => x + 3)(4)  // 7


// ==========================
// Logical Operators
// ==========================

// And. Short circuiting operator, returning the first falsey value. The word form is prefered over &&.

true and 2       // 2
2 && true        // true
"hello" and 77   // 77
0 and 77         // 77
2 and "hello"    // 'hello'
"hello" && 77    // 77
0 && 77          // 77
2 && "hello"     // 'hello
(a => a + 1) && "hello"  // 'hello'
false and false  // false
false and true   // false
false and 77     // false
null and "hello" // null
null && "hello"  // null

// Or. Short circuiting operator, returning the first truthy value. The word form is prefered over ||.

(a => a + 1) || "hello" // '<function>'
false or false   // false
false or true    // true
false or 77      // 77
null or "hello"  // 'hello'


// ==========================
// Variables
// ==========================

// Define variables with let, they don't exist until they have been defined
// You can't use keywords as variable names
// Variable names can be letters, or underscores, or number (but cannot start with a number)
let variable = 0  // declare with an initial value

// and the value can be accessed by using its name
// variables must be defined before they can be accessed or assigned to
variable

// you can't redefine the same variable in the same scope
// but you can redefine it in a lower scope, by using it in a block
// variables are dropped at the end of a scope
let a = 7
  let a = 5
  a // 5
a // 7


// ==========================
// Pipeline Operator
// ==========================

// Passes the value on the left as the first argument to the function on the right.

25 >> type           // 'number'
25 >> type >> type // 'string'


// ==========================
// Control Flow
// ==========================

// If expressions
if (condition) doSomething else doSomethingElse

// can be chained to make if else
if (condition) doSomething else if (condition) doSomething else doSomethingElse

// Match expressions
match x
  | ..0 -> 'a'
  | 0 -> 'b'
  | 1..2 -> 'c'
  | 2.. -> 'd'
  | _ -> 'e'
// you can match on literal values, on a range, or catch all

// Or we can write them on a line
match value | true -> 4 | false -> 1


// ==========================
// Comments
// ==========================

// As seen in this file.
// Comment until the end of a line with `//`
// Useless expressions are discarded, so strings can also be used as comments on thier own line, as they will be stripped out

// There are a few of places where comments can't be put at the end of a line
// - Inside a function's parameter list
// - Directly after an else
// - Plus a couple more
